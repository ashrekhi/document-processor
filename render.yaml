services:
  # Backend API service
  - type: web
    name: backend
    env: python
    region: oregon
    plan: free
    buildCommand: >
      cd backend &&
      # Make sure we have the right version of pinecone globally as well
      pip install --no-cache-dir "pinecone==2.2.2" &&
      # Create and set up the virtual environment
      python -m venv clean_venv &&
      . clean_venv/bin/activate &&
      pip install --upgrade pip &&
      # Uninstall any existing pinecone packages
      pip uninstall -y pinecone-client pinecone &&
      # Install the specific version of pinecone that we know works with the new API
      pip install --no-cache-dir "pinecone==2.2.2" &&
      # Install dependencies
      pip install --no-cache-dir -r requirements.txt &&
      # Print diagnostics
      pip list | grep pinecone &&
      python -c "
import sys
print('Python version:', sys.version)
print('Python path:', sys.path)
try:
    import pinecone
    print('Pinecone imported successfully')
    print('Package version:', getattr(pinecone, '__version__', 'unknown'))
    print('Has Pinecone class:', hasattr(pinecone, 'Pinecone'))
    print('Package location:', pinecone.__file__)
    print('dir(pinecone):', dir(pinecone))
except Exception as e:
    print('ERROR importing pinecone:', str(e))
    import traceback
    traceback.print_exc()
"
    startCommand: >
      cd backend && 
      echo "Starting application with virtual environment at $PWD/clean_venv" &&
      . clean_venv/bin/activate &&
      # Print diagnostics at startup
      python -c "
      import sys
      print('STARTUP: Python version:', sys.version)
      try:
          import pinecone
          print('STARTUP: Pinecone imported successfully')
          print('STARTUP: Package version:', getattr(pinecone, '__version__', 'unknown'))
          print('STARTUP: Pinecone class exists:', hasattr(pinecone, 'Pinecone'))
          print('STARTUP: Package location:', pinecone.__file__)
      except Exception as e:
          print('STARTUP ERROR importing pinecone:', str(e))
      " &&
      # Start the application
      gunicorn -k uvicorn.workers.UvicornWorker -w 1 app.main:app --bind 0.0.0.0:$PORT
    envVars:
      - key: OPENAI_API_KEY
        sync: false
      - key: PINECONE_API_KEY
        sync: false
      - key: PINECONE_INDEX
        value: "radiant-documents"
      - key: PINECONE_CLOUD
        value: "aws"
      - key: PINECONE_REGION
        value: "us-east-1"
      - key: ALLOW_DEV_FALLBACK
        value: "true"
      - key: PORT
        value: 8000
      - key: PYTHON_VERSION
        value: 3.9.18

  # Frontend static site
  - type: web
    name: frontend
    env: static
    region: oregon
    buildCommand: cd frontend && npm install && npm run build
    staticPublishPath: frontend/dist
    envVars:
      - key: VITE_BACKEND_URL
        value: https://backend-jtuc.onrender.com
    headers:
      - path: /*
        name: Cache-Control
        value: no-store 