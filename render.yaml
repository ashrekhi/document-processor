services:
  # Backend API service
  - type: web
    name: backend
    env: python
    region: oregon
    plan: free
    buildCommand: >
      cd backend &&
      # Make sure we have the right version of pinecone globally as well
      pip install --no-cache-dir "pinecone==2.2.2" &&
      # Create and set up the virtual environment
      python -m venv clean_venv &&
      . clean_venv/bin/activate &&
      pip install --upgrade pip &&
      # Uninstall any existing pinecone packages
      pip uninstall -y pinecone-client pinecone &&
      # Install the specific version of pinecone that we know works with the new API
      pip install --no-cache-dir "pinecone==2.2.2" &&
      # Install dependencies
      pip install --no-cache-dir -r requirements.txt &&
      # Print diagnostics
      pip list | grep pinecone &&
      echo "===== PINECONE PACKAGE DIAGNOSTICS =====" &&
      python -c "
import sys
print('Python version:', sys.version)
print('Python path:', sys.path)
try:
    import pinecone
    print('Pinecone imported successfully')
    print('Package version:', getattr(pinecone, '__version__', 'unknown'))
    print('Has Pinecone class:', hasattr(pinecone, 'Pinecone'))
    print('Has init function:', hasattr(pinecone, 'init'))
    print('Package location:', pinecone.__file__)
    print('Package directory:', dir(pinecone))
    
    # Try importing the specific classes to see which work
    print('\\nAttempting specific imports...')
    success = []
    try:
        from pinecone import Pinecone
        success.append('Pinecone class')
    except Exception as e:
        print(f'Error importing Pinecone class: {str(e)}')
    
    try:
        from pinecone import init
        success.append('init function')
    except Exception as e:
        print(f'Error importing init function: {str(e)}')
    
    try:
        from pinecone import Index
        success.append('Index class')
    except Exception as e:
        print(f'Error importing Index class: {str(e)}')
        
    print(f'Successfully imported: {success}')
    
except Exception as e:
    print('ERROR importing pinecone:', str(e))
    import traceback
    traceback.print_exc()
" &&
      echo "===== END DIAGNOSTICS ====="
    startCommand: >
      cd backend && 
      echo "Starting application with virtual environment at $PWD/clean_venv" &&
      . clean_venv/bin/activate &&
      # Print diagnostics at startup
      echo "===== STARTUP DIAGNOSTICS =====" &&
      python -c "
      import sys
      print('STARTUP: Python version:', sys.version)
      try:
          import pinecone
          print('STARTUP: Pinecone imported successfully')
          print('STARTUP: Package version:', getattr(pinecone, '__version__', 'unknown'))
          print('STARTUP: Pinecone class exists:', hasattr(pinecone, 'Pinecone'))
          print('STARTUP: Init function exists:', hasattr(pinecone, 'init'))
          print('STARTUP: Package location:', pinecone.__file__)
          print('STARTUP: Package directory:', dir(pinecone))
          
          # Try importing specific components
          print('\\nSTARTUP: Attempting specific imports...')
          success = []
          try:
              from pinecone import Pinecone
              success.append('Pinecone class')
              # Try to instantiate
              try:
                  p = Pinecone(api_key='test')
                  print('STARTUP: Successfully instantiated Pinecone class')
              except Exception as inst_e:
                  print(f'STARTUP: Error instantiating Pinecone: {str(inst_e)}')
          except Exception as e:
              print(f'STARTUP: Error importing Pinecone class: {str(e)}')
          
          try:
              from pinecone import Index
              success.append('Index class')
          except Exception as e:
              print(f'STARTUP: Error importing Index class: {str(e)}')
              
          print(f'STARTUP: Successfully imported: {success}')
          
          # Direct check for the configured index
          print('\\nSTARTUP: Checking for configured Pinecone index...')
          import os
          pinecone_api_key = os.getenv('PINECONE_API_KEY')
          pinecone_index_name = os.getenv('PINECONE_INDEX', 'radiant-documents')
          pinecone_cloud = os.getenv('PINECONE_CLOUD', 'aws')
          pinecone_region = os.getenv('PINECONE_REGION', 'us-east-1')
          pinecone_env = os.getenv('PINECONE_ENVIRONMENT')
          
          print(f'STARTUP: Environment settings:')
          print(f'  PINECONE_INDEX: {pinecone_index_name}')
          print(f'  PINECONE_CLOUD: {pinecone_cloud}')
          print(f'  PINECONE_REGION: {pinecone_region}')
          print(f'  PINECONE_ENVIRONMENT: {pinecone_env if pinecone_env else \"Not set\"}')
          
          if pinecone_api_key:
              print(f'STARTUP: API key found beginning with: {pinecone_api_key[:5]}...')
              
              # Try to list available indexes with the configured settings
              if hasattr(pinecone, 'Pinecone'):
                  # V2 API
                  print('STARTUP: Using V2 API to list indexes')
                  pc = Pinecone(api_key=pinecone_api_key, cloud=pinecone_cloud)
                  try:
                      indexes = pc.list_indexes()
                      print(f'STARTUP: V2 API successfully listed indexes: {indexes}')
                      print(f'STARTUP: Type of indexes response: {type(indexes)}')
                      
                      # Enhanced extraction of available indexes
                      available_indexes = []
                      if isinstance(indexes, dict) and 'indexes' in indexes:
                          for idx in indexes.get('indexes', []):
                              if isinstance(idx, dict) and 'name' in idx:
                                  available_indexes.append(idx['name'])
                                  print(f'STARTUP: Found index name: {idx[\"name\"]}')
                      
                      # Fallback using regex if needed
                      if not available_indexes:
                          import re
                          raw_response = str(indexes)
                          print(f'STARTUP: Raw response contains: {raw_response[:200]}...')
                          name_matches = re.findall(r\"'name'\\s*:\\s*'([^']+)'\", raw_response)
                          if name_matches:
                              available_indexes = name_matches
                              print(f'STARTUP: Extracted indexes using regex: {available_indexes}')
                      
                      print(f'STARTUP: Available indexes: {available_indexes}')
                      
                      # Check if our index exists
                      if pinecone_index_name in available_indexes:
                          print(f'STARTUP: SUCCESS - Index \"{pinecone_index_name}\" found!')
                      elif available_indexes:
                          # Try case-insensitive match
                          case_match = None
                          for idx in available_indexes:
                              if idx.lower() == pinecone_index_name.lower():
                                  case_match = idx
                                  print(f'STARTUP: Found case-insensitive match: \"{idx}\" vs \"{pinecone_index_name}\"')
                                  break
                          
                          if not case_match:
                              print(f'STARTUP: WARNING - Index \"{pinecone_index_name}\" NOT FOUND')
                              print(f'STARTUP: Available indexes are: {available_indexes}')
                      else:
                          # Direct string check in raw response
                          target_str = f\"'name': '{pinecone_index_name}'\"
                          raw_response = str(indexes)
                          if target_str in raw_response:
                              print(f'STARTUP: Found index via direct string match: \"{pinecone_index_name}\"')
                          else:
                              print(f'STARTUP: WARNING - Index \"{pinecone_index_name}\" NOT found in raw response')
                              print(f'STARTUP: Raw response: {raw_response[:200]}...')
                  except Exception as list_e:
                      print(f'STARTUP: Error listing indexes with V2 API: {str(list_e)}')
                      import traceback
                      print(f'STARTUP: Error details: {traceback.format_exc()}')
              
              elif hasattr(pinecone, 'init'):
                  # V1 API
                  print('STARTUP: Using V1 API to list indexes')
                  try:
                      if pinecone_env:
                          pinecone.init(api_key=pinecone_api_key, environment=pinecone_env)
                      else:
                          pinecone.init(api_key=pinecone_api_key)
                          
                      indexes = pinecone.list_indexes()
                      print(f'STARTUP: V1 API successfully listed indexes: {indexes}')
                      
                      # Check if our index exists in the V1 format
                      if isinstance(indexes, list):
                          print(f'STARTUP: Available indexes: {indexes}')
                          if pinecone_index_name in indexes:
                              print(f'STARTUP: SUCCESS - Index \"{pinecone_index_name}\" found!')
                          else:
                              print(f'STARTUP: WARNING - Index \"{pinecone_index_name}\" NOT FOUND in available indexes')
                              # Check for case-insensitive matches
                              for idx in indexes:
                                  if idx.lower() == pinecone_index_name.lower():
                                      print(f'STARTUP: Found case-insensitive match: \"{idx}\" vs configured \"{pinecone_index_name}\"')
                  except Exception as list_e:
                      print(f'STARTUP: Error listing indexes with V1 API: {str(list_e)}')
                      import traceback
                      print(f'STARTUP: Error details: {traceback.format_exc()}')
          else:
              print('STARTUP: WARNING - No Pinecone API key found in environment variables')
      except Exception as e:
          print('STARTUP ERROR importing pinecone:', str(e))
          import traceback
          traceback.print_exc()
      " &&
      echo "===== END STARTUP DIAGNOSTICS =====" &&
      # Start the application
      gunicorn -k uvicorn.workers.UvicornWorker -w 1 app.main:app --host 0.0.0.0:$PORT
    envVars:
      - key: OPENAI_API_KEY
        sync: false
      - key: PINECONE_API_KEY
        sync: false
      - key: PINECONE_INDEX
        value: "radiant-documents"
      - key: PINECONE_CLOUD
        value: "aws"
      - key: PINECONE_REGION
        value: "us-east-1"
      - key: ALLOW_DEV_FALLBACK
        value: "true"
      - key: DEBUG_PINECONE
        value: "true"
      - key: PORT
        value: 8000
      - key: PYTHON_VERSION
        value: 3.9.18

  # Frontend static site
  - type: web
    name: frontend
    env: static
    region: oregon
    buildCommand: cd frontend && npm install && npm run build
    staticPublishPath: frontend/dist
    envVars:
      - key: VITE_BACKEND_URL
        value: https://backend-jtuc.onrender.com
    headers:
      - path: /*
        name: Cache-Control
        value: no-store 